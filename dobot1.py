# Dobot program generated from RoboDK post processor
import threading
import sys
import os


# Communication port (usually serial port)
COM_CONNECT = "COM4"
print("Connecting to: " + COM_CONNECT)

# Library path: Important, Python 3.5 or later must be used. Make sure to link suitable binaries (32 vs 64 bit)
DOBOT_LIBRARY_PATH = r"""C:\RoboDK\Posts\bin"""
#DOBOT_LIBRARY_PATH = r"""C:/Users/UserName/Desktop/DobotDll"""

sys.path.append(os.path.abspath(DOBOT_LIBRARY_PATH)) # temporarily add path to POSTS folder
os.environ['PATH'] = DOBOT_LIBRARY_PATH + os.pathsep + os.environ['PATH']



# Clean Command Queued
dType.SetQueuedCmdClear(api)

# Async Motion Params Setting
dType.SetHOMEParams(api, 200, 200, 200, 200, isQueued = 1)
dType.SetPTPJointParams(api, 200, 200, 200, 200, 200, 200, 200, 200, isQueued = 1)
dType.SetPTPCommonParams(api, 100, 100, isQueued = 1)

# Async Home (only required after rebooting the controller)
#dType.SetHOMECmd(api,dobotId, temp=0, isQueued=1)

def Home():
    """Set the Dobot Magician back to its home position to get a correct reference position. 
    Perform the homing operation after rebooting the controller or the stepper motors lost steps"""
    dType.SetHOMECmd(api, temp=0, isQueued=1)

# Main program definition
def Prog1():
    '''Main procedure'''
    print('Sending program Prog1 ...')
    # Program generated by RoboDK v5.4.3 for Dobot Magician on 05/01/2023 10:11:12
    # Using nominal kinematics.
    dType.SetEndEffectorSuctionCup(api,dType.PTPMode.PTPMOVJANGLEMode, 1, isQueued=1)
    dType.SetPTPCmd(api, dType.PTPMode.PTPMOVJANGLEMode, 0.000000, 38.027700, 64.262600, -0.000000, isQueued=1)

    dType.SetPTPCmd(api, dType.PTPMode.PTPMOVJANGLEMode, 37.438000, 50.919600, 49.141900, 37.438000, isQueued=1)

    dType.SetPTPCmd(api, dType.PTPMode.PTPMOVLANGLEMode, 37.438000, 23.588400, -1.651240, 37.438000, isQueued=1)
    dType.SetPTPCmd(api, dType.PTPMode.PTPMOVLANGLEMode, -7.235810, 0.780116, 2.741760, -7.235810, isQueued=1)

    dType.SetEndEffectorSuctionCup(api, dType.PTPMode.PTPMOVJANGLEMode, 0, isQueued=1) 
    print('Program Prog1 sent')
   

    # Save the index command of the last command (set a short pause)
    lastIndex = dType.SetWAITCmd(api, 0.1, isQueued = 1)[0]
    
    # Start to Execute Queued Commands
    dType.SetQueuedCmdStartExec(api)
    
    # Wait until execution is done by verifying current command
    while lastIndex > dType.GetQueuedCmdCurrentIndex(api)[0]:
        dType.dSleep(100)

    
    # Stop executing commands
    dType.SetQueuedCmdStopExec(api)
    # Clear all queued commands
    dType.SetQueuedCmdClear(api)
    print('Program Prog1 Finished')
 

# Main program call: set as a loop
while True:
    Prog1()
    break

# Notify user before closing:
print("Done!")
